import csv

class CSVReader:
    """
    A utility class for interacting with a CSV file containing model classification reports.

    This class provides methods to count the number of lines in a CSV file and to append
    classification report metrics generated by scikit-learn's `classification_report` function.

    Attributes:
        _filename (str): The path to the CSV file.
    
    Methods:
        get_line() -> int:
            Reads the CSV file and returns the total count of lines.
            Returns -1 if the file is not found or an error occurs.

        add_cp(model_name: str, cp: str) -> None:
            Appends a single line to the CSV file with metrics extracted from a
            classification report. The report is assumed to follow the format of
            `sklearn.metrics.classification_report`.

            Args:
                model_name (str): The name of the model associated with the classification report.
                cp (str): The raw text output of `classification_report`.
    """
    def __init__(self, filename):
        self._filename = filename
    
    def get_line(self):
        try:
            with open(self._filename, 'r') as file:
                # Enumerate lines and return the count
                for i, _ in enumerate(file, start=1):
                    pass
            return i  # i will be the index of the last line
        except FileNotFoundError:
            print(f"File '{self._filename}' not found.")
            return -1  # Return -1 to indicate file not found
        except Exception as e:
            print(f"An error occurred: {e}")
            return -1  # Return -1 for general errors 

    def add_cp(self, model_name, cp):
        """
        Add a classification report to a single line in the CSV file.

        Args:
            model_name (str): Name of the model.
            cp (str): The classification report generated by sklearn.metrics.classification_report.
        """
        # Parse the classification report into structured data
        report_lines = cp.strip().split("\n")
        row = [model_name]

        # Extract class-specific metrics
        for line in report_lines[2:]:
            if line.strip():  # Ignore blank lines
                parts = line.split()
                if len(parts) >= 5:  # At least label, precision, recall, f1-score, support
                    row.extend(parts[1:5])  # Add precision, recall, f1, support

        # Extract overall metrics
        accuracy = report_lines[-3].split()[-1]
        macro_avg = report_lines[-2].split()[1:]
        weighted_avg = report_lines[-1].split()[1:]

        row.extend([accuracy] + macro_avg + weighted_avg)

        # Append the single row to the CSV file
        with open(self._filename, 'a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(row)